// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime? @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  collections    Collection[]
  comments       Comment[]
  ratings        Rating[]
  forumPosts     ForumPost[]
  forumComments  ForumComment[]
  activities     Activity[]

  @@map("users")
}

model Collection {
  id            Int    @id @default(autoincrement())
  userId        String
  mediaId       String
  mediaType     String  // Could be "anime", "manga", "character", etc.
  title         String?
  image         String?

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mediaId, userId, mediaType])
  @@map("collections")
}

model Comment {
  id            Int      @id @default(autoincrement())
  mediaId       String
  userId        String
  comment       String
  userName      String
  userImage     String
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Rating {
  id            Int    @id @default(autoincrement())
  mediaId       String
  userId        String
  rating        Int

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mediaId, userId])
  @@map("ratings")
}

model ForumPost {
  id            Int           @id @default(autoincrement())
  userId        String
  title         String
  content       String
  createdAt     DateTime       @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      ForumComment[]

  @@map("forum_posts")
}

model ForumComment {
  id            Int           @id @default(autoincrement())
  postId        Int
  userId        String
  parentId      Int?           // To support threaded comments
  content       String
  createdAt     DateTime       @default(now())

  post          ForumPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation to itself to support nested comments (replies)
  parent        ForumComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       ForumComment[] @relation("CommentReplies")

  @@map("forum_comments")
}


model Activity {
  id            Int      @id @default(autoincrement())
  userId        String
  action        String    // Example: "posted", "commented"
  targetId      Int?      // ID of the target (like post or comment)
  targetType    String?   // Example: "ForumPost", "ForumComment"
  createdAt     DateTime  @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model MediaCache {
  id            Int    @id @default(autoincrement())
  mediaId       String @unique
  mediaType     String  // "anime", "manga", etc.
  title         String
  data          Json
  createdAt     DateTime @default(now())

  @@map("media_cache")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
