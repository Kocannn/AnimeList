// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Collection  {
  id                Int @id @default(autoincrement())
  anime_mal_id      String  
  user_email        String
  anime_title       String?
  anime_image       String?
  type              String

  @@unique([anime_mal_id,user_email])
}

model Comment{
  id                Int @id @default(autoincrement())
  anime_mal_id      String
  user_email        String
  comment           String
  user_name         String
  anime_title       String
  user_image        String
  type              String
  created_at        DateTime @default(now())
}

model Rating{
  id                Int @id @default(autoincrement())
  anime_mal_id      String
  user_email        String
  anime_title       String
  ratings           Int
  @@unique([anime_mal_id,user_email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime? @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}
